#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

// Норма вектора
double norm(const vector<double>& v) {
    double sum = 0;
    for (double x : v) {
        sum += x  *  x;
    }
    return sqrt(sum);
}

// Метод Зейделя
vector<double> zeidel(vector<vector<double>>& A, vector<double>& b, double tol = 0.01, int max_iter = 1000) {
    int n = A.size();
    vector<double> x(n);
    vector<double> x_prev(n);

    for (int k = 0; k < max_iter; k++) {
        for (int i = 0; i < n; i++) {
            x_prev[i] = x[i];

            double sum = 0;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    sum += A[i][j]  *  x[j];
                }
            }

            x[i] = (b[i] - sum) / A[i][i];
        }

        // Вычитаем x_prev из x поэлементно
        transform(x_prev.begin(), x_prev.end(), x.begin(), x.begin(), minus<double>());

        if (norm(x) < tol) {
            return x;
        }
    }

    throw runtime_error("Метод не сходится.");
}

int main() {
    // Коэффициенты матрицы
    vector<vector<double>> A = {
        {-26, -7, -8, -2, 0},
        {2, -17, -6, -2, 0},
        {-7, -6, -23, -3, 0},
        {3, -2, -7, -13, 0}
    };

    // Вектор свободных членов
    vector<double> b = {-51, 85, 71, 91};

    // Решение системы методом Зейделя
    try {
        vector<double> x = zeidel(A, b);

        // Выводим решение
        for (int i = 0; i < x.size(); ++i) {
            cout << "x" << i + 1 << " = " << x[i] << endl;
        }
    } catch (runtime_error& e) {
        cerr << e.what() << endl;
    }

    return 0;
}
