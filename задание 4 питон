import numpy as np

def thomas_algorithm(matrix):
    n = len(matrix)
    
    c = np.zeros(n-1)
    d = np.zeros(n)
    x = np.zeros(n)
    
    for i in range(n):
        if i == 0:
            c[i] = matrix[i][i+1] / matrix[i][i]
            d[i] = matrix[i][-1] / matrix[i][i]
        elif i == n-1:
            d[i] = (matrix[i][-1] - matrix[i][i-1] * d[i-1]) / (matrix[i][i] - matrix[i][i-1] * c[i-1])
        else:
            c[i] = matrix[i][i+1] / (matrix[i][i] - matrix[i][i-1] * c[i-1])
            d[i] = (matrix[i][-1] - matrix[i][i-1] * d[i-1]) / (matrix[i][i] - matrix[i][i-1] * c[i-1])
    
    x[-1] = d[-1]
    for i in range(n-2, -1, -1):
        x[i] = d[i] - c[i] * x[i+1]
    
    return x

# Матрица коэффициентов и свободных членов
matrix = np.array([[6, 3, 0, 0, 0, -33],
                    [6, -23, -9, 0, 0, -107],
                    [0, 2, -7, -1, 0, 18],
                    [0, 0, 4, 15, -9, -69],
                    [0, 0, 0, 5, -11, -31]])

# Решение системы уравнений методом прогонки
solution = thomas_algorithm(matrix)
print("Solution:")
print(solution)
